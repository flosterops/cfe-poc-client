import React, { FunctionComponent, ReactElement, useState } from 'react';
import { Button, Column, Description, Icon, Row, Message, Captcha } from 'ui';
import config from './config.json';
import { AlignItemsTypes, ComponentSizesTypes, FontSizeTypes, WeightTypes } from 'helpers/enums';
import { colors } from 'helpers/colors';
import styled from 'styled-components';
import { IButton } from 'ui/Button';
import { Field, Form } from 'widgets';
import { inputStyles } from 'helpers/inputStyled';
import { IFieldProps } from 'widgets/Form/FieldWrap';
import { IconTypes } from 'helpers/icons';

const { getFieldBorder, getFieldBg, getFieldHeight } = inputStyles.account;

const StyledField = styled(Field)<IFieldProps>`
    input {
        padding: 0 12px;
        ${getFieldBorder};
        ${getFieldBg};
        ${getFieldHeight};
    }
`;

const CancelButton = styled(Button)<IButton>`
    width: 180px;
    height: 45px;
    button {
        height: 43px;
    }
    border: 1px solid ${colors.yellow};
`;

const SaveButton = styled(Button)<IButton>`
    width: 180px;
    height: 45px;
    button {
        height: 43px;
    }
    border: 1px solid ${(props) => (props.disabled ? colors.disabled : colors.yellow)};
`;

interface AddAuth {
    hasQuestions: boolean;
    setStep: (step: number) => void;
}

const AddAuth: FunctionComponent<AddAuth> = ({ hasQuestions, setStep }: AddAuth): ReactElement => {
    return (
        <>
            <Description mtop="35px">{config.subTitle}</Description>
            <Row componentHeight="47px" ai={AlignItemsTypes.center} bg={colors.grayMedium} padding="0 15px" mtop="15px">
                <Icon mright="10px" alt={IconTypes.warning} icon={IconTypes.warning} />
                <Description color={colors.black}>{config.warning}</Description>
            </Row>
            <SaveButton
                disabled={!hasQuestions}
                onClick={(): void => setStep(1)}
                mtop="30px"
                componentSize={ComponentSizesTypes.m}
                color={colors.yellow}
            >
                <Description weight={WeightTypes.w600} color={colors.dark} uppercase fontSize={FontSizeTypes.s}>
                    add
                </Description>
            </SaveButton>
        </>
    );
};

interface MobileAuthForm {
    setStep: (step: number) => void;
}

const MobileAuthForm: FunctionComponent<MobileAuthForm> = ({ setStep }: MobileAuthForm): ReactElement => {
    return (
        <Column>
            <Description mtop="20px">
                Increase the security of your Glyph account using the Glyph Mobile Authenticator. If you have not
                already done so, please visit the following links to download the Authenticator. The Glyph Mobile
                Authenticator is available for download at the iTunes® store, Google Play™ store, or for Windows® Phone.
            </Description>
            <Description mtop="25px">
                Please enter the Serial Key generated by the Authenticator in the field below. You will also need to
                answer the Secret Questions associated with this account and fill in the CAPTCHA field.
            </Description>
            <Form initialValues={{ key: '', questionOne: '', questionSecond: '' }}>
                {(): ReactElement => {
                    return (
                        <Column>
                            <Row componentWidth="50%" mtop="40px">
                                <Column pright="40px">
                                    <Description mbottom="10px">Authenticator Serial Key</Description>
                                    <StyledField componentSize={ComponentSizesTypes.full} type="text" name="key" />
                                </Column>
                            </Row>
                            <Row mtop="40px">
                                <Row componentWidth="50%">
                                    <Column pright="40px">
                                        <Description mbottom="10px">Secret Question #1</Description>
                                        <StyledField
                                            componentSize={ComponentSizesTypes.full}
                                            type="text"
                                            name="questionOne"
                                            label="What is your favorite video game of all time?"
                                        />
                                    </Column>
                                </Row>
                                <Row componentWidth="50%">
                                    <Column pleft="40px">
                                        <Description mbottom="10px">Secret Question #2</Description>
                                        <StyledField
                                            componentSize={ComponentSizesTypes.full}
                                            type="text"
                                            name="questionSecond"
                                            label="What is your favorite video game of all time?"
                                        />
                                    </Column>
                                </Row>
                            </Row>
                            <Captcha mtop="55px" />
                            <Row mtop="55px">
                                <SaveButton mright="60px" color={colors.yellow}>
                                    <Description weight={WeightTypes.w600} color={colors.dark} uppercase>
                                        apply serial key
                                    </Description>
                                </SaveButton>
                                <CancelButton color={colors.dark} onClick={(): void => setStep(0)}>
                                    <Description weight={WeightTypes.w600} uppercase>
                                        cancel
                                    </Description>
                                </CancelButton>
                            </Row>
                        </Column>
                    );
                }}
            </Form>
        </Column>
    );
};

function MobileAuthComponent(
    hasQuestions: boolean,
    step: number,
    hasMobileAuth: boolean,
    setStep: (step: number) => void
): ReactElement {
    switch (true) {
        case hasMobileAuth:
            return (
                <Message
                    padding="20px 0"
                    icon={IconTypes.lock}
                    text="Your account is now protected by a Mobile Authenticator"
                />
            );
        case !hasQuestions:
        default:
            return <AddAuth hasQuestions={hasQuestions} setStep={setStep} />;
        case hasQuestions && step === 1:
            return <MobileAuthForm setStep={setStep} />;
    }
}

interface Mobile {
    hasQuestions: boolean;
    hasMobileAuth: boolean;
}

const Mobile: FunctionComponent<Mobile> = ({ hasQuestions, hasMobileAuth }: Mobile): ReactElement => {
    const [step, setStep] = useState<number>(0);
    return <Column componentHeight="100%">{MobileAuthComponent(hasQuestions, step, hasMobileAuth, setStep)}</Column>;
};

export { Mobile };
